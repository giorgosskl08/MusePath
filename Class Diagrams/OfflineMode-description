Museum App Offline Mode - Observer Pattern Class Diagram Description

Overview:
The class diagram illustrates a design for implementing offline functionality in a museum app using the Observer pattern. This architectural approach enables the app to detect connectivity changes and adapt its behavior accordingly, ensuring users can continue using basic features even without an internet connection.
Observer Pattern Implementation
The core of this design is the Observer pattern, represented by the Subject and Observer interfaces at the top of the diagram. The Subject interface includes methods for registering, removing, and notifying observers, while the Observer interface has an update method that receives connectivity status.
The ConnectivityManager class implements the Subject interface, monitoring network connectivity and maintaining a list of observers. When connectivity changes, it notifies all registered observers through the notifyObservers() method.
The OfflineModeController class implements the Observer interface and receives connectivity updates from the ConnectivityManager. Based on these updates, it can switch between online and offline modes using its switchToOfflineMode() and switchToOnlineMode() methods.

Key Components and Responsibilities:
The OfflineContentManager is responsible for managing downloadable content, with methods to download content, check available categories, and determine storage requirements.
The LocalStorageService handles saving and loading content to/from the device's local storage, providing methods to manage storage and track available space.
The ContentSynchronizer manages the synchronization of user data and museum content when connectivity is restored, using a queue to track pending changes.
The NotificationService communicates offline status and feature availability to users through various notification methods.
The OfflineMapHandler provides map functionality in offline mode, allowing users to view previously downloaded maps, get their current position, and plan paths.
The ContentStorageManager manages storage usage, providing methods to check usage, manage content, and free up space when needed.
Key Relationships
The OfflineModeController registers with the ConnectivityManager to receive connectivity updates. When connectivity changes, the Observer pattern facilitates automatic notification and mode switching.
The OfflineModeController uses the NotificationService to communicate status changes to the user.
The OfflineModeController manages the ContentSynchronizer, which handles data synchronization when connectivity is restored.
The OfflineContentManager uses the LocalStorageService to save and retrieve content for offline use.

How This Design Fulfills Requirements:
This design addresses the offline mode requirements (items 24-27 in the requirements document):

Requirement 24: "The system must provide an offline mode" - Implemented through the OfflineModeController
Requirement 25: "The user must be able to download exhibit information and maps" - Handled by the OfflineContentManager and OfflineMapHandler
Requirement 26: "The user must be able to use basic map and pre-downloaded exhibit information in offline mode" - Enabled by the OfflineMapHandler and LocalStorageService
Requirement 27: "The system must synchronize the user's data when the user goes online" - Managed by the ContentSynchronizer

Sequence of Events:
The sequence diagrams provide additional context on how these components interact:

Scenario 1: User Downloads Museum Content for Offline Use
Scenario 2: User Navigates Museum in Offline Mode
Scenario 3: System Synchronizes Data When Returning Online

In these scenarios, the Observer pattern plays a crucial role in detecting connectivity changes and triggering appropriate responses from the system.


Key Methods in the Museum App's Observer Pattern Implementation

Observer Pattern Core Methods

ConnectivityManager
- checkConnectivity(): The cornerstone method that detects network status changes by monitoring the device's connection state. This triggers the entire observer notification chain when connectivity changes.
- notifyObservers(): Critical method that broadcasts connectivity status to all registered observers, initiating the system's response to connection changes.

OfflineModeController
- update(isConnected: boolean): Receives connectivity status updates and determines how the app should respond. This method serves as the entry point for the app's reaction to connectivity changes.
- switchToOfflineMode(): Reconfigures the app to function without internet, enabling cached content and disabling online-only features.
- switchToOnlineMode(): Restores full functionality when connectivity returns and initiates synchronization processes.

Content Management Methods

OfflineContentManager
- downloadContent(id): Manages the process of downloading and storing selected museum content categories for offline use. This method is essential for preparing the app for potential offline scenarios.
- checkDownloadedContent(): Verifies what content is available locally when the app enters offline mode, determining what functionality can be provided.
- getStorageRequirement(): Calculates storage space needed for selected content, helping users make informed decisions about what to download.

LocalStorageService
- saveContent(content, category): Handles the actual storage of downloaded content to the device's local storage.
- loadContent(id): Retrieves locally stored content when in offline mode, enabling continued access to museum information.

Synchronization Methods

ContentSynchronizer
- syncUserData(): Manages the critical process of reconciling changes made while offline (like ratings, favorites, or viewing history) with the central system when connectivity is restored.
- collectPendingChanges(): Gathers all changes made during offline mode that need to be synchronized when connection returns.

Map Functionality

OfflineMapHandler
- loadOfflineMap(): Loads previously downloaded map data, allowing users to navigate the museum even without an internet connection.
- planPath(start, destination): Enables offline navigation functionality by calculating routes between exhibits using locally stored map data.

User Communication

NotificationService
- showOfflineNotification(): Alerts users when the app enters offline mode, setting appropriate expectations for available functionality.
- showSyncProgress(): Keeps users informed during the synchronization process when connectivity is restored.


